// This file cnetralizes translations and allows for future language expansion
function translateCode(code) {
    const TRANSLATIONS = {
        "if": "sí",
        "else": "sino",
        "elif": "sino sí",
        "for": "para",
        "while": "mientras",
        "break": "interrumpir",
        "continue": "continuar",
        "return": "retornar",
        "def": "definir",
        "class": "clase",
        "self": "sí mismo",
        "None": "ninguno",
        "True": "verdadero",
        "False": "falso",
        "and": "y",
        "or": "o",
        "not": "no",
        "import": "importar",
        "from": "desde",
        "as": "como",
        "pass": "pasar",
        "lambda": "lámda",
        "try": "intentar",
        "except": "excepto",
        "finally": "finalmente",
        "with": "con",
        "raise": "elevar",
        "assert": "afirmar",
        "yield": "producir",
        "global": "global",
        "nonlocal": "no local",
        "del": "eliminar",
        "is": "es",
        "in": "en",
        "print": "imprimir",
        "input": "entrada",
        "open": "abrir",
        "read": "leer",
        "write": "escribir",
        "append": "agregar",
        "close": "cerrar",
        "len": "longitud",
        "str": "cadena",
        "int": "entero",
        "float": "flotante",
        "list": "lista",
        "dict": "diccionario",
        "set": "conjunto",
        "tuple": "tupla",
        "range": "rango",
        "map": "mapear",
        "filter": "filtrar",
        "zip": "emparejar",
        "sorted": "ordenar",
        "sum": "sumar",
        "max": "máximo",
        "min": "mínimo",
        "abs": "absoluto",
        "round": "redondear",
        "pow": "potencia",
        "enumerate": "enumerar",
        "reversed": "invertir",
        "super": "súper",
        "format": "formato",
        "join": "unir",
        "split": "dividir"
    };
    Object.keys(glossary).forEach((key) => {
        const regex = new RegExp(`\\b${key}\\b`, 'g');
        codeSnippet = codeSnippet.replace(regex, glossary[key]);
    });
  
    return codeSnippet;
}

// Function to get translation (includes caching for performance)
const getTranslation = (word) => TRANSLATIONS[word] || word;
